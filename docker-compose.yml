services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: go_backend
    ports:
      - "8000:8000"
    environment:
      - POSTGRE_DB_HOST=db
      - POSTGRE_DB_PORT=5432
      - POSTGRE_DB_USER=${DB_USERNAME:-root}
      - POSTGRE_DB_PASSWORD=${DB_PASSWORD:-somethingsecret}
      - POSTGRE_DB_NAME=${DB_DATABASE:-postgresdb}
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  db:
    image: postgres:17.4-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${DB_USERNAME:-root}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-somethingsecret}
      POSTGRES_DB: ${DB_DATABASE:-postgresdb}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-root}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: next_frontend
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
